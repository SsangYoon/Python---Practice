# -*- coding: utf-8 -*-
'''
Created on 2015. 8. 11.
@attention: About For-Statement
@author: Sangyun
'''
# For-Statement의 기본구조 
# for 변수 in 리스트(또는, 튜플, 문자열)
#     <수행할 문장>

# Example 
Name_Tuple = ("Sangyoon", "Mouse", "GDoc", "Nutria")

for Name in Name_Tuple :        # Name 변수가 Name_Tuple[0]~[-1]을 차례차례 참조한다  
    print ("My Name : " + Name)
    
# My Name : Sangyoon
# My Name : Mouse
# My Name : GDoc
# My Name : Nutria
    
# 참고 For-Statement안에 생성되었던 변수는 계속 남아 있다 
print (Name)        # Nutria 




# For-Statement의 Continue 
# 똑같다. 단, for문의 변수부의 인덱스가 자동으로 +1된다 
Grade_List = [50, 10, 20 ,80, 50, 60]
Number = 0
for Grade in Grade_List : 
    Number += 1
    
    if Grade >= 50 : 
        print ("%d번 학생 합격!" % Number)
        
    else : continue         # 알았쥬? 

# 1번 학생 합격!
# 4번 학생 합격!
# 5번 학생 합격!
# 6번 학생 합격!

# For-Statement의 Break 
Name_List = ["Sangyoon", "Mouse", "GDoc", "Nutria"]
Name_List[2] = None     # 값이 수정되어 버렸다! 

for Name in Name_List : 
    if Name != None : 
        print ("My Name : " + Name)
        
    else : break        # 그럼 Name이 Name_List[2]를 기리킬 때 루프를 탈출하게 된다 

# My Name : Sangyoon
# My Name : Mouse


# For-Statement와 Range함수
Interget_List = range(1, 10)        # 1~10이 요소로 들어간 리스트 객체를 만들어서 Intergel이 참조하게끔 함 
print (Interget_List)               # range(1, 10)

Sum = 0
for Number in Interget_List :       # 쉽게 리스트의 합을 구해보자 
    Sum += Number

print (Sum)

# 다양한 For-Statement 
A_List =[(1,2), ("Three","Four")]
for (First, Second) in A_List :         # First, Second = A_List[0]
    print (First,Second)                # (First, Second) = (1, 2)    // Tuple 대입법 











